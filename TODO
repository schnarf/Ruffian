Language Design
==================================
- Finish up array types.
- Define how & and | operators work. Can we make it so it's not necessary to distinguish
  bitwise and logical, since booleans and arithmetic types can't be implicitly mixed?
- POINTERS!
- Resolve the issue with function definitions inside of functions. Either disallow them,
  or mangle the name so that there's no problem at codegen time
- Consider not requiring "def". Does it add anything? Does the non-C-like syntax for functions
  add anything? It shouldn't be hard to change the parser, but let's think about the syntax.
- Add a constexpr sort of thing. It would be good to make the notion of compile time constants
  a little more useful than just something whose AST leaves are all literals. This will, for
  example, make static arrays more useful.

Compiler
==================================
- Clean up error messages in lexer, parser, and codegen. Errors should also be emitted with
  references to the line number and position where the error was encountered.
- Transform the AST or emit code differently so that it always satisfies llvm's rule
  that basic blocks must be terminated in a branch/return. Right now there's just
  a special-case for conditionals.
 - Add overflow checking for implicit conversions of constants. This is something
   in the language spec that's not implemented.

Refactory
==================================
- Have StmtAST::Codegen return a bool indicating success or failure, and check it
- Fix up the way free statements happen, and how return statements are stored in the scope.
  Maybe the AST should be transformed so that explicit function calls to free() are inserted into the block.
- Separate out semantic checking just a little bit. Already started to do this when checking
  whether conditionals are implicitly convertable to bool in for, while, and if statements.
  Basically we should do all the necessary parsing to get what we need for that node,
  and then, just before creating the AST node, we should do the semantic checking.