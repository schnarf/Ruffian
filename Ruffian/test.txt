def factorial ( int n ) -> int {
	if( n == 0 ) { return 1; }
	return n * factorial(n - 1);
}

def fibonacci( int n ) -> int {
	if( n < 3 ) { return 1; }
	return fibonacci(n-1) + fibonacci(n-2);
}

def decl_test(int n) -> int {
	int ret;
	if( n < 3 ) {
		int x= factorial(n);
		ret= x;
	} else {
		int x= fibonacci(n);
		ret= x;
	}

	return ret;
}

def bool_test(int n) -> int {
	bool bValue= true;
	bValue= n < 3;
	if( bValue ) {
		return n;
	}
	return 3;
}

def opt_test(int x) -> int {
	return (1+2+x) * (x+(1+2));
}

def stefs_function(int x) -> int {
	return x*x*x;
}

def prototype2(int x) -> int;

def prototype1(int x) -> int {
	return prototype2(x);
}

def prototype2(int x) -> int {
	return 1 + x;
}

def prototype2(int x) -> int;

def operator_precedence(int x, int y) -> int {
	int b= y / x + 3 * (y - x);
	return b;
}

def printInt(int n) -> void;
def printFloat(float f) -> void;
def printDouble(double f) -> void;
def printNewline() -> void;

def main(int n) -> int {
	double d= 3.4;
	printDouble( d );
	d= 4.5;
	printDouble( d );
	printDouble( 1.2 );
	printNewline();

	float f= 8.5;
	printFloat( f );
	printNewline();

	double d2= f;
	printDouble( d2 );
	printNewline();

	printDouble( d2 * f );
	printFloat( d2 );
	printDouble( float(2.3) );
	printDouble( double(f) );

	return fibonacci(n);
}